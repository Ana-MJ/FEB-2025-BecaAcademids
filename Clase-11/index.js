console.log('HOLA ESTE ES MI PRIMER SCRIPT');

//(PRIMITIVOS):
let nombre = 'aldo'; //string
nombre[0] = 'Ron'; // tipo de dato primitivo y eso significa que es inmutable
nombre = 'Ronaldo';
let edad = 30; //numero
let masculino = true; //boolean
let sobrinos = null; //nulos
let papas = undefined; //valor no definido
let id = Symbol("foo"); //Symbol => identidicador unico
console.log(id);
let saldo = 221348123081283n //Bigint

console.log (typeof nombre, typeof edad); // saber el tipo de dato


//new genera objetos
const number1 = new Number('0');  //expresiones, funcion cosntructora, clase, prototipo
const number2 = new Number(2+3);
const number3 = new Number(true); //conversion de typos
const number4 = new Number(false); //conversion de typos
const number5 = new Number([].length);

//const number1 = Number('0');  //expresiones, funcion cosntructora, clase, prototipo
//const number2 = Number(2+3);
//const number3 = Number(true);
//const number4 = Number(false);
//const number5 = Number([].length);
//console.log();

/////////////////////////////////////////////////////////////////////////

//(COMPLEJOS): POO => abstraccion de obejtos de la vida real
let persona = {
    nombre: 'Aldo',
    edad: 30, 
    papas: [{nombre: 'Aldo', edad:30}]
}; // literal object

//si se puede mutar es cambiar una peque√±a parte  del valor (cambiar/transformar)
persona.nombre = 'Ronaldo';
//persona['nombre']; //Ronaldo
console.log(persona);
const aldo = persona; // direccion de memoria
aldo.nombre = 'Rogelio';
console.log(persona); //ronaldo
console.log(aldo); //rogelio

let coleccion = ['aldo', 'magaly', 'judit'];
//Elemento de arreglo:
// coleccion [0]; //aldo
// coleccion [1]; //magaly
// coleccion [2]; //judit
console.log(coleccion);

const arreglo = [0,1,2,3,3,5];
//metrodo constructor o clase
const set = new Set(arreglo); //arreglo, colecciones de valores unicos limpia los duplicados
//new genera un nuevo tipo de dato (memoria)
console.log(set);
console.log(set.size); //conjunto de elementos que tiene
set.add('asd');
console.log(set);
console.log(set.size);
set.add('5');
console.log(set);
console.log(set.size);
console.log(set.delete(5));
console.log(set.has(15)); //has valida si existe o no, retornando un booleando

//map
const map = new Map();
map.set(1, 'uno');
const value = map.has(1);
console.log(value);
const otherValue = map.get(1);
console.log(otherValue);
//let deleteResult = map.delete(0);
//console.log(deleteResult);
console.log(map);
map.clear();
console.log(map);
console.log(map.size);

/**
 *  Sistema de Inventario de una Tienda
Crea un arreglo de objetos donde cada objeto represente un producto con nombre, precio y stock. Luego, muestra en consola los productos con stock disponible.
 */

/**
 * Lista de Estudiantes y Promedios
Dado un arreglo de estudiantes con sus notas, calcula su promedio y determina si aprobaron (nota m√≠nima 6).
 */

/**
 * Gesti√≥n de Citas M√©dicas
Crea un sistema que registre citas m√©dicas con fecha, paciente y doctor. Luego, muestra las citas futuras.
 */

/**
 * Filtrar Pel√≠culas por G√©nero
Crea una lista de pel√≠culas con t√≠tulo y g√©nero. Filtra solo las de acci√≥n.
 */

/**
 * Registro de Empleados y Sueldos
Dado un listado de empleados con su sueldo, calcula el sueldo total que debe pagar la empresa.
 */

/**
 * Tienda en L√≠nea - Buscar Productos por Nombre
Crea una funci√≥n que permita buscar un producto por su nombre en un cat√°logo.
 */

/**
 * Gesti√≥n de Usuarios en una Plataforma
Dado un listado de usuarios con nombre y rol (admin o usuario), filtra solo los administradores
 */

/**
 * An√°lisis de Ventas en un Restaurante
Dado un arreglo de ventas con nombre de plato y monto, calcula el total vendido.
 */

/**
 * Registro de Asistencia en una Clase
Crea un sistema que registre alumnos y su asistencia (presente o ausente). Luego, muestra cu√°ntos asistieron.
 */

//SET y MAP

/**
 * (1) Eliminar Duplicados en una Lista de Productos (Set)
Dada una lista de productos donde algunos est√°n repetidos, usa Set para eliminar duplicados.
2Ô∏è‚É£ Contar Palabras √önicas en un Texto (Set)
Dado un p√°rrafo, cuenta cu√°ntas palabras √∫nicas tiene.
3Ô∏è‚É£ Verificar si un Usuario ya ha Iniciado Sesi√≥n (Set)
Dado un conjunto de usuarios en sesi√≥n, verifica si uno en espec√≠fico ya inici√≥ sesi√≥n.
 Lista de Invitados √önicos en un Evento (Set)
Asegura que cada invitado solo pueda registrarse una vez en la lista.
5Ô∏è‚É£ Registro de Placas de Autos en un Estacionamiento (Set)
Solo se pueden registrar autos √∫nicos.
6Ô∏è‚É£ Contar la Frecuencia de Palabras en un Texto (Map)
Cuenta cu√°ntas veces aparece cada palabra en un texto.
Almacenar Precios de Productos (Map)
Usa un Map para almacenar los precios de productos y consultar por nombre.
8Ô∏è‚É£ Agenda Telef√≥nica con B√∫squeda R√°pida (Map)
Crea una agenda telef√≥nica donde puedas buscar el n√∫mero de una persona por su nombre.
9Ô∏è‚É£ Registro de Votos en una Elecci√≥n (Map)
Dado un conjunto de votos, cuenta cu√°ntos votos tiene cada candidato.
üîü Historial de Compras de un Cliente (Map)
Registra el historial de compras de un cliente, donde cada cliente tiene una lista de productos comprados.
 */